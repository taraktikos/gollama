// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/pgvector/pgvector-go"
)

const createWikiRecord = `-- name: CreateWikiRecord :one
INSERT INTO wiki_records (
  content_id, page_title, section_title, breadcrumb, text, embedding, metadata
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, content_id, page_title, section_title, breadcrumb, text, embedding, metadata
`

type CreateWikiRecordParams struct {
	ContentID    pgtype.Text
	PageTitle    pgtype.Text
	SectionTitle pgtype.Text
	Breadcrumb   pgtype.Text
	Text         pgtype.Text
	Embedding    pgvector.Vector
	Metadata     []byte
}

func (q *Queries) CreateWikiRecord(ctx context.Context, arg CreateWikiRecordParams) (WikiRecord, error) {
	row := q.db.QueryRow(ctx, createWikiRecord,
		arg.ContentID,
		arg.PageTitle,
		arg.SectionTitle,
		arg.Breadcrumb,
		arg.Text,
		arg.Embedding,
		arg.Metadata,
	)
	var i WikiRecord
	err := row.Scan(
		&i.ID,
		&i.ContentID,
		&i.PageTitle,
		&i.SectionTitle,
		&i.Breadcrumb,
		&i.Text,
		&i.Embedding,
		&i.Metadata,
	)
	return i, err
}

const getMostSimilarRecord = `-- name: GetMostSimilarRecord :many
SELECT id, content_id, page_title, section_title, breadcrumb, text, embedding, metadata FROM wiki_records ORDER BY embedding <=> $1 LIMIT 1
`

func (q *Queries) GetMostSimilarRecord(ctx context.Context, embedding pgvector.Vector) ([]WikiRecord, error) {
	rows, err := q.db.Query(ctx, getMostSimilarRecord, embedding)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WikiRecord
	for rows.Next() {
		var i WikiRecord
		if err := rows.Scan(
			&i.ID,
			&i.ContentID,
			&i.PageTitle,
			&i.SectionTitle,
			&i.Breadcrumb,
			&i.Text,
			&i.Embedding,
			&i.Metadata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWikiRecordsCount = `-- name: GetWikiRecordsCount :one
SELECT count(*) FROM wiki_records
`

func (q *Queries) GetWikiRecordsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getWikiRecordsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}
