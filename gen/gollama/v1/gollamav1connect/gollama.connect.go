// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gollama/v1/gollama.proto

package gollamav1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/taraktikos/gollama/gen/gollama/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GollamaServiceName is the fully-qualified name of the GollamaService service.
	GollamaServiceName = "gollama.v1.GollamaService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GollamaServiceSearchProcedure is the fully-qualified name of the GollamaService's Search RPC.
	GollamaServiceSearchProcedure = "/gollama.v1.GollamaService/Search"
	// GollamaServiceGenerateFromSinglePromptProcedure is the fully-qualified name of the
	// GollamaService's GenerateFromSinglePrompt RPC.
	GollamaServiceGenerateFromSinglePromptProcedure = "/gollama.v1.GollamaService/GenerateFromSinglePrompt"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	gollamaServiceServiceDescriptor                        = v1.File_gollama_v1_gollama_proto.Services().ByName("GollamaService")
	gollamaServiceSearchMethodDescriptor                   = gollamaServiceServiceDescriptor.Methods().ByName("Search")
	gollamaServiceGenerateFromSinglePromptMethodDescriptor = gollamaServiceServiceDescriptor.Methods().ByName("GenerateFromSinglePrompt")
)

// GollamaServiceClient is a client for the gollama.v1.GollamaService service.
type GollamaServiceClient interface {
	Search(context.Context, *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error)
	GenerateFromSinglePrompt(context.Context, *connect.Request[v1.GenerateFromSinglePromptRequest]) (*connect.Response[v1.GenerateFromSinglePromptResponse], error)
}

// NewGollamaServiceClient constructs a client for the gollama.v1.GollamaService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGollamaServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GollamaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gollamaServiceClient{
		search: connect.NewClient[v1.SearchRequest, v1.SearchResponse](
			httpClient,
			baseURL+GollamaServiceSearchProcedure,
			connect.WithSchema(gollamaServiceSearchMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		generateFromSinglePrompt: connect.NewClient[v1.GenerateFromSinglePromptRequest, v1.GenerateFromSinglePromptResponse](
			httpClient,
			baseURL+GollamaServiceGenerateFromSinglePromptProcedure,
			connect.WithSchema(gollamaServiceGenerateFromSinglePromptMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// gollamaServiceClient implements GollamaServiceClient.
type gollamaServiceClient struct {
	search                   *connect.Client[v1.SearchRequest, v1.SearchResponse]
	generateFromSinglePrompt *connect.Client[v1.GenerateFromSinglePromptRequest, v1.GenerateFromSinglePromptResponse]
}

// Search calls gollama.v1.GollamaService.Search.
func (c *gollamaServiceClient) Search(ctx context.Context, req *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error) {
	return c.search.CallUnary(ctx, req)
}

// GenerateFromSinglePrompt calls gollama.v1.GollamaService.GenerateFromSinglePrompt.
func (c *gollamaServiceClient) GenerateFromSinglePrompt(ctx context.Context, req *connect.Request[v1.GenerateFromSinglePromptRequest]) (*connect.Response[v1.GenerateFromSinglePromptResponse], error) {
	return c.generateFromSinglePrompt.CallUnary(ctx, req)
}

// GollamaServiceHandler is an implementation of the gollama.v1.GollamaService service.
type GollamaServiceHandler interface {
	Search(context.Context, *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error)
	GenerateFromSinglePrompt(context.Context, *connect.Request[v1.GenerateFromSinglePromptRequest]) (*connect.Response[v1.GenerateFromSinglePromptResponse], error)
}

// NewGollamaServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGollamaServiceHandler(svc GollamaServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gollamaServiceSearchHandler := connect.NewUnaryHandler(
		GollamaServiceSearchProcedure,
		svc.Search,
		connect.WithSchema(gollamaServiceSearchMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gollamaServiceGenerateFromSinglePromptHandler := connect.NewUnaryHandler(
		GollamaServiceGenerateFromSinglePromptProcedure,
		svc.GenerateFromSinglePrompt,
		connect.WithSchema(gollamaServiceGenerateFromSinglePromptMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/gollama.v1.GollamaService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GollamaServiceSearchProcedure:
			gollamaServiceSearchHandler.ServeHTTP(w, r)
		case GollamaServiceGenerateFromSinglePromptProcedure:
			gollamaServiceGenerateFromSinglePromptHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGollamaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGollamaServiceHandler struct{}

func (UnimplementedGollamaServiceHandler) Search(context.Context, *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gollama.v1.GollamaService.Search is not implemented"))
}

func (UnimplementedGollamaServiceHandler) GenerateFromSinglePrompt(context.Context, *connect.Request[v1.GenerateFromSinglePromptRequest]) (*connect.Response[v1.GenerateFromSinglePromptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gollama.v1.GollamaService.GenerateFromSinglePrompt is not implemented"))
}
